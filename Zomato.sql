USE ZOMATO;
-- Customer Manager
CREATE TABLE CUSTOMER(
   CUSTOMER_ID BIGINT NOT NULL AUTO_INCREMENT,
   PhoneNumber VARCHAR(10) UNIQUE NOT NULL,
   Email VARCHAR(25),
   DOB DATE,
   ANIVERSERY_DATE DATE,

   # CONSTRAINT
   PRIMARY KEY (CUSTOMER_ID),
   CONSTRAINT CK_Customer_PhoneNumber CHECK (PhoneNumber LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')
);

-- Address Manager
CREATE TABLE STATE
(
   STATE_ID INT NOT NULL AUTO_INCREMENT,
   STATE_NAME VARCHAR(50),
   PRIMARY KEY (STATE_ID)
);

CREATE TABLE CITY(
   CITY_ID INT NOT NULL AUTO_INCREMENT,
   CITY_NAME VARCHAR(50),
   STATE_ID INT NOT NULL,
   PRIMARY KEY (CITY_ID),
   FOREIGN KEY (STATE_ID) REFERENCES STATE(STATE_ID) ON DELETE CASCADE
);

CREATE TABLE AREA(
   AREA_ID INT NOT NULL AUTO_INCREMENT,
   AREA_NAME VARCHAR(50),
   CITY_ID INT NOT NULL,
   PRIMARY KEY (AREA_ID),
   FOREIGN KEY (CITY_ID) REFERENCES CITY(CITY_ID) ON DELETE CASCADE
);


CREATE TABLE ADDRESS(
   ADDRESS_ID INT NOT NULL AUTO_INCREMENT,
   CUSTOMER_ID BIGINT NOT NULL,
   ADDRESS_LINE_1 VARCHAR(100),
   ADDRESS_LINE_2 VARCHAR(100),
   STREET VARCHAR(100),
   AREA_ID INT NOT NULL,
   PIN_CODE VARCHAR(10) NOT NULL,
   LATITUDE DOUBLE,
   LONGITUDE DOUBLE,

   # CONSTRAINT
   PRIMARY KEY (ADDRESS_ID),
   FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
   CONSTRAINT CK_Address_PINCODE CHECK (PIN_CODE LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
   FOREIGN KEY (AREA_ID) REFERENCES AREA(AREA_ID) ON DELETE CASCADE
);

CREATE TABLE `STORE` (
  `STORE_ID` int NOT NULL AUTO_INCREMENT,
  `STORE_NAME` VARCHAR(255) NOT NULL,
  `PHONE_NUMBER` varchar(100) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `GSTIN` varchar(100) DEFAULT NULL,
  `FSSIN` varchar(100) DEFAULT NULL,
  `IS_STORE_VERIFIED` enum('IN_PROCESS','REJECTED','NOT_VERIFIED','VERIFIED') NOT NULL DEFAULT 'NOT_VERIFIED',
  
  PRIMARY KEY (`STORE_ID`)
);


CREATE TABLE `STORE_ADDRESS` (
  `ADDRESS_ID` int NOT NULL AUTO_INCREMENT,
  `STORE_ID` int NOT NULL,
  `ADDRESS_LINE_1` varchar(100) NOT NULL,
  `ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `STREET` varchar(100) NOT NULL,
  `AREA_ID` int NOT NULL,
  `PIN_CODE` varchar(10) NOT NULL,
  `LATITUDE` double NOT NULL,
  `LONGITUDE` double NOT NULL,


  PRIMARY KEY (`ADDRESS_ID`),
  KEY `STORE_ID` (`STORE_ID`),
  KEY `AREA_ID` (`AREA_ID`),
  CONSTRAINT `store_address_ibfk_1` FOREIGN KEY (`STORE_ID`) REFERENCES `STORE` (`STORE_ID`) ON DELETE CASCADE,
  CONSTRAINT `store_address_ibfk_2` FOREIGN KEY (`AREA_ID`) REFERENCES `AREA` (`AREA_ID`) ON DELETE CASCADE
 # CONSTRAINT `CK_Store_Address_PINCODE` CHECK ((`PIN_CODE` like _utf8mb4'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))
);

CREATE TABLE `DOCUMENT` (
  `DOCUMENT_ID` int NOT NULL AUTO_INCREMENT,
  `DOCUMENT_NAME` bigint NOT NULL,
  `DOCUMENT_TYPE` ENUM('STORE','DRIVER') NOT NULL,
  `DOUCMENT_DEMO_URL` varchar(255) DEFAULT NULL,
  
   PRIMARY KEY (`DOCUMENT_ID`)
);


CREATE TABLE `STORE_DOCUMENT` (
  `STORE_DOCUMENT_ID` INT NOT NULL AUTO_INCREMENT,
  `DOCUMENT_ID` INT NOT NULL,
  `STORE_ID` INT NOT NULL,
  `UPLOADED_DOCUMENT_URL` VARCHAR(255) DEFAULT "",
  `IS_DOCUMENT_VERIFIED` ENUM('IN_PROCESS','REJECTED','APPROVED') NOT NULL DEFAULT 'IN_PROCESS',

  PRIMARY KEY (`STORE_DOCUMENT_ID`),
  FOREIGN KEY (`DOCUMENT_ID`) REFERENCES DOCUMENT(DOCUMENT_ID) ON DELETE CASCADE,
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS `STORE_IMAGE` (
  `STORE_IMAGE_ID` int NOT NULL AUTO_INCREMENT,
  `STORE_ID` int,
  `STORE_IMAGE_URL` varchar(255),
  `IMAGE_ORDER_NO` int DEFAULT 0,

  PRIMARY KEY (`STORE_IMAGE_ID`),
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS `STORE_MENU` (
  `STORE_MENU_ID` int NOT NULL AUTO_INCREMENT,
  `STORE_ID` int,
  `MENU_IMAGE_URL` varchar(255),
  `IMAGE_ORDER_NO` int DEFAULT 0,

  PRIMARY KEY (`STORE_MENU_ID`),
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE
);


# FOOD MANAGER

# Mumbaiya Vadapav, Jain Vadapav --> Sabka Bhau Vadapav (14)
CREATE TABLE `FOOD_CATEGORY` (
  `FOOD_CATEGORY_ID` INT NOT NULL AUTO_INCREMENT,
  `STORE_ID` int NOT NULL,

  PRIMARY KEY (`FOOD_CATEGORY_ID`),
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE
);

# Sabka Bhau Vadapav (14), Hatke Khao Samosa Pav (9), Kothimbir Vadi For Everybody (8), 
CREATE TABLE `FOOD_CATEGORY_DEVIDER` (
  `FOOD_CATEGORY_DEVIDER_ID` INT NOT NULL AUTO_INCREMENT,
  `FOOD_CATEGORY_ID` INT,
  `FOOD_ID` INT,

  PRIMARY KEY (`FOOD_CATEGORY_DEVIDER_ID`),
  FOREIGN KEY (`FOOD_CATEGORY_ID`) REFERENCES FOOD_CATEGORY(FOOD_CATEGORY_ID) ON DELETE SET NULL,
  FOREIGN KEY (`FOOD_ID`) REFERENCES FOOD(FOOD_ID) ON DELETE CASCADE
);


CREATE TABLE `FOOD` (
  `FOOD_ID` int NOT NULL AUTO_INCREMENT,
  `STORE_ID` int NOT NULL,
  `FOOD_TYPE` ENUM('VEG','NON_VEG') DEFAULT 'VEG',
  `FOOD_CATEGORY_ID` INT,
  `DESC` TEXT DEFAULT NULL,
  `MRP` FLOAT NOT NULL,
  `PRICE` FLOAT NOT NULL,
  `IS_AVAILABLE` BOOL DEFAULT TRUE,

  PRIMARY KEY (`FOOD_ID`),
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE,
  FOREIGN KEY (`FOOD_CATEGORY_ID`) REFERENCES FOOD_CATEGORY(FOOD_CATEGORY_ID) ON DELETE SET NULL,
  CONSTRAINT `CK_Food_Price` CHECK (`MRP` >= `PRICE`)
);


CREATE TABLE IF NOT EXISTS `FOOD_IMAGE` (
  `FOOD_IMAGE_ID` int NOT NULL AUTO_INCREMENT,
  `FOOD_ID` int,
  `FOOD_IMAGE_URL` varchar(255),

  PRIMARY KEY (`FOOD_IMAGE_ID`),
  FOREIGN KEY (`FOOD_ID`) REFERENCES FOOD(FOOD_ID) ON DELETE CASCADE
);


# Maharashtrian, Street Food, Beverages
CREATE TABLE CUISINE (
   CUISINE_ID INT NOT NULL AUTO_INCREMENT,
   NAME VARCHAR(50),
   
   PRIMARY KEY (`CUISINE_ID`)
);

# MMV --> Maharashtrian, Street Food, Beverages
CREATE TABLE STORE_CUISINE (
   STORE_CUISINE_ID INT NOT NULL AUTO_INCREMENT,
   CUISINE_ID INT,
   STORE_ID INT,
   
   PRIMARY KEY (`STORE_CUISINE_ID`),
   FOREIGN KEY (`CUISINE_ID`) REFERENCES CUISINE(CUISINE_ID) ON DELETE CASCADE,
   FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE
);

# Breakfast, Home Delivery , Takeaway Available , Vegetarian Only , Indoor Seating
CREATE TABLE FACILITY (
   FACILITY_ID INT NOT NULL AUTO_INCREMENT,
   NAME VARCHAR(50),
   
   PRIMARY KEY (`FACILITY_ID`)
);

CREATE TABLE STORE_FACILITY (
   STORE_FACILITY_ID INT NOT NULL AUTO_INCREMENT,
   FACILITY_ID INT,
   STORE_ID INT,
   
   PRIMARY KEY (`STORE_FACILITY_ID`),
   FOREIGN KEY (`FACILITY_ID`) REFERENCES FACILITY(FACILITY_ID) ON DELETE CASCADE,
   FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE
);


CREATE TABLE `STORE_HOLIDAY` (
  `STORE_HOLIDAY_ID` bigint unsigned NOT NULL AUTO_INCREMENT,
  `DATE` date NOT NULL,
  `MESSAGE` TEXT,
  `STORE_ID` int,

  PRIMARY KEY (`STORE_HOLIDAY_ID`),
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE
);

CREATE TABLE `STORE_TIME` (
  `STORE_TIME_ID` bigint unsigned NOT NULL AUTO_INCREMENT,
  `STORE_ID` int NOT NULL,
  `DAY` ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') DEFAULT 'Monday',
  `OPEN_TIME` TIME,
  `CLOSE_TIME` TIME,

  PRIMARY KEY (`STORE_TIME_ID`),
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE,
  CONSTRAINT UNIQUE (STORE_ID, DAY)
);


-- Order Manager
CREATE TABLE `ORDER` (
  `ORDER_ID` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ID` BIGINT NOT NULL,
  `STORE_ID` INT NOT NULL,
  `ADDRESS_ID` INT NOT NULL,
  `DELIVERY_BOY_ID` INT NOT NULL,
  `DELIVERY_STATUS` INT NOT NULL,
  

  `QUANTITY` INT NOT NULL DEFAULT 1,
  `DELIVERY_CHARGES` FLOAT NOT NULL,
  
  `PAYMENT_MODE` ENUM('COD', 'ONLINE') DEFAULT 'COD', 
  `TRANSCATION_ID` INT UNSIGNED,

  `ORDER_DATE` DATETIME NOT NULL,

  PRIMARY KEY (`ORDER_ID`),
  FOREIGN KEY (`CUSTOMER_ID`) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
  FOREIGN KEY (`STORE_ID`) REFERENCES STORE(STORE_ID) ON DELETE CASCADE,
  FOREIGN KEY (`ADDRESS_ID`) REFERENCES ADDRESS(ADDRESS_ID) ON DELETE CASCADE
);



CREATE TABLE `ORDER_FOOD_LIST` (
  `ORDER_FOOD_LIST_ID` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ID` BIGINT NOT NULL,
  `ORDER_ID` BIGINT  UNSIGNED NOT NULL,
  `FOOD_ID` INT NOT NULL,


  `QUANTITY` INT NOT NULL DEFAULT 1,
  `PRICE` FLOAT NOT NULL,  # --> SINGLE PRODUCT
  `MRP_PRICE` FLOAT NOT NULL,
  `ADMIN_CHARGES` FLOAT NOT NULL,
  `TOTAL_AMOUNT` FLOAT NOT NULL, 


  PRIMARY KEY (`ORDER_FOOD_LIST_ID`),
  FOREIGN KEY (`CUSTOMER_ID`) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
  FOREIGN KEY (`ORDER_ID`) REFERENCES `ORDER`(ORDER_ID) ON DELETE CASCADE,
  FOREIGN KEY (`FOOD_ID`) REFERENCES FOOD(FOOD_ID) ON DELETE CASCADE
);


CREATE TABLE `TRANSCATION` (
  `TRANSCATION_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `REFERENCE_NO` VARCHAR(255) NOT NULL,
  `ORDER_ID` BIGINT UNSIGNED NOT NULL,
  `PAYMENT_OPTION` VARCHAR(255),
  `MESSAGE` TEXT,
  `AMOUNT` FLOAT NOT NULL,

  PRIMARY KEY (`TRANSCATION_ID`),
  FOREIGN KEY (`ORDER_ID`) REFERENCES `ORDER`(ORDER_ID) ON DELETE CASCADE
);

ALTER TABLE `ORDER` ADD FOREIGN KEY (`TRANSCATION_ID`) REFERENCES TRANSCATION(TRANSCATION_ID);


CREATE TABLE `DELIVERY_BOY` (
  `DELIVERY_BOY_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `FULL_NAME` VARCHAR(255),
  `DATE_OF_BIRTH` DATE NOT NULL,
  `PASSPORT_PHOTO_URL` VARCHAR(255),
  `IS_ONLINE` BOOL DEFAULT FALSE,
  `IS_VERIFIED` ENUM('NOT_VERIFIED','VERIFIED') DEFAULT 'NOT_VERIFIED',

  PRIMARY KEY (`DELIVERY_BOY_ID`)
);

CREATE TABLE `DELIVERY_BOY_LOCATION` (
  `DELIVERY_BOY_ID` INT UNSIGNED NOT NULL,
  `LAT` FLOAT,
  `LONG` FLOAT,

   FOREIGN KEY (`DELIVERY_BOY_ID`) REFERENCES DELIVERY_BOY(DELIVERY_BOY_ID) ON DELETE CASCADE
);

CREATE TABLE `DELIVERY_BOY_DOCUMENT` (
  `DELIVERY_BOY_DOCUMENT_ID` INT NOT NULL AUTO_INCREMENT,
  `DOCUMENT_ID` INT NOT NULL,
  `DELIVERY_BOY_ID` INT UNSIGNED NOT NULL,
  `ISSUE_DATE` DATE,
  `EXPIRY_DATE` DATE,
  `UPLOADED_DOCUMENT_URL` VARCHAR(255) DEFAULT "",
  `IS_DOCUMENT_VERIFIED` ENUM('IN_PROCESS','REJECTED','APPROVED') NOT NULL DEFAULT 'IN_PROCESS',

  PRIMARY KEY (`DELIVERY_BOY_DOCUMENT_ID`),
  FOREIGN KEY (`DOCUMENT_ID`) REFERENCES DOCUMENT(DOCUMENT_ID) ON DELETE CASCADE,
  FOREIGN KEY (`DELIVERY_BOY_ID`) REFERENCES DELIVERY_BOY(DELIVERY_BOY_ID) ON DELETE CASCADE
);




